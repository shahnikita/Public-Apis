// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ServiceProviderService.
    /// </summary>
    public static partial class ServiceProviderServiceExtensions
    {
            /// <summary>
            /// GetCustomers (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static Customers GetCustomers(this IServiceProviderService operations, string acceptLanguage = default(string))
            {
                return operations.GetCustomersAsync(acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetCustomers (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of all your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Customers> GetCustomersAsync(this IServiceProviderService operations, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomersWithHttpMessagesAsync(acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetReceivableCharges (beta)
            /// </summary>
            /// <remarks>
            /// Get the amounts that one of your customers owe you for a specific billing
            /// period. There are three types of charges that are included in the data
            /// returned: recurring, usage, and setup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='date'>
            /// Specify a date within the desired billing period. Format: yyyy-MM-dd (UTC).
            /// Default: Today. For example, if the date is March 17th and your billing
            /// period is from the 1st to the 31st of the month, it will return data from
            /// March 1st to March 31st.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static ReceivableCharges GetReceivableCharges(this IServiceProviderService operations, System.Guid customerId, System.DateTime? date = default(System.DateTime?), string acceptLanguage = default(string))
            {
                return operations.GetReceivableChargesAsync(customerId, date, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetReceivableCharges (beta)
            /// </summary>
            /// <remarks>
            /// Get the amounts that one of your customers owe you for a specific billing
            /// period. There are three types of charges that are included in the data
            /// returned: recurring, usage, and setup.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='date'>
            /// Specify a date within the desired billing period. Format: yyyy-MM-dd (UTC).
            /// Default: Today. For example, if the date is March 17th and your billing
            /// period is from the 1st to the 31st of the month, it will return data from
            /// March 1st to March 31st.
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ReceivableCharges> GetReceivableChargesAsync(this IServiceProviderService operations, System.Guid customerId, System.DateTime? date = default(System.DateTime?), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetReceivableChargesWithHttpMessagesAsync(customerId, date, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetSubscriptions (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of subscriptions for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static Subscriptions GetCustomerSubscriptions(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string))
            {
                return operations.GetCustomerSubscriptionsAsync(customerId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetSubscriptions (beta)
            /// </summary>
            /// <remarks>
            /// Get the list of subscriptions for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Subscriptions> GetCustomerSubscriptionsAsync(this IServiceProviderService operations, System.Guid customerId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCustomerSubscriptionsWithHttpMessagesAsync(customerId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateSubscriptionsAmendment (beta)
            /// </summary>
            /// <remarks>
            /// Amend subscriptions quantities for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static SubscriptionsAmendment CreateSubscriptionsAmendment(this IServiceProviderService operations, System.Guid customerId, IList<SubscriptionsAmendmentParameters> body = default(IList<SubscriptionsAmendmentParameters>), string acceptLanguage = default(string))
            {
                return operations.CreateSubscriptionsAmendmentAsync(customerId, body, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateSubscriptionsAmendment (beta)
            /// </summary>
            /// <remarks>
            /// Amend subscriptions quantities for one of your customers.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='customerId'>
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SubscriptionsAmendment> CreateSubscriptionsAmendmentAsync(this IServiceProviderService operations, System.Guid customerId, IList<SubscriptionsAmendmentParameters> body = default(IList<SubscriptionsAmendmentParameters>), string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateSubscriptionsAmendmentWithHttpMessagesAsync(customerId, body, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// GetSubscriptionsAmendmentStatus (beta)
            /// </summary>
            /// <remarks>
            /// Get the status of a subscriptions amendment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionsAmendmentId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            public static string GetSubscriptionsAmendmentStatus(this IServiceProviderService operations, System.Guid subscriptionsAmendmentId, string acceptLanguage = default(string))
            {
                return operations.GetSubscriptionsAmendmentStatusAsync(subscriptionsAmendmentId, acceptLanguage).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetSubscriptionsAmendmentStatus (beta)
            /// </summary>
            /// <remarks>
            /// Get the status of a subscriptions amendment.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionsAmendmentId'>
            /// </param>
            /// <param name='acceptLanguage'>
            /// Specify language (and culture) following [RFC 7231, section 5.3.5:
            /// Accept-Language].
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> GetSubscriptionsAmendmentStatusAsync(this IServiceProviderService operations, System.Guid subscriptionsAmendmentId, string acceptLanguage = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubscriptionsAmendmentStatusWithHttpMessagesAsync(subscriptionsAmendmentId, acceptLanguage, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
