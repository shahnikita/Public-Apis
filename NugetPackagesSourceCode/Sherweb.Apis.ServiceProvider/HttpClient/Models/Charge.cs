// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Sherweb.Apis.ServiceProvider.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// A product is constituted of one or multiple charges.
    /// </summary>
    public partial class Charge
    {
        /// <summary>
        /// Initializes a new instance of the Charge class.
        /// </summary>
        public Charge()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Charge class.
        /// </summary>
        /// <param name="chargeType">Possible values include: 'Setup',
        /// 'Recurring', 'Usage', 'Unknown'</param>
        /// <param name="billingCycleType">Possible values include: 'OneTime',
        /// 'Monthly', 'Yearly'</param>
        /// <param name="costPrice">Price paid per unit.</param>
        /// <param name="costPriceProrated">Prorated price paid per
        /// unit.</param>
        /// <param name="isProratable">Indicates whether or not the price of
        /// the charge is proratable.</param>
        public Charge(string productName = default(string), string sku = default(string), System.Guid? chargeId = default(System.Guid?), string chargeName = default(string), string chargeType = default(string), string billingCycleType = default(string), System.DateTime? periodFrom = default(System.DateTime?), System.DateTime? periodTo = default(System.DateTime?), double? quantity = default(double?), double? costPrice = default(double?), double? costPriceProrated = default(double?), string currency = default(string), bool? isProratable = default(bool?))
        {
            ProductName = productName;
            Sku = sku;
            ChargeId = chargeId;
            ChargeName = chargeName;
            ChargeType = chargeType;
            BillingCycleType = billingCycleType;
            PeriodFrom = periodFrom;
            PeriodTo = periodTo;
            Quantity = quantity;
            CostPrice = costPrice;
            CostPriceProrated = costPriceProrated;
            Currency = currency;
            IsProratable = isProratable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "sku")]
        public string Sku { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "chargeId")]
        public System.Guid? ChargeId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "chargeName")]
        public string ChargeName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Setup', 'Recurring',
        /// 'Usage', 'Unknown'
        /// </summary>
        [JsonProperty(PropertyName = "chargeType")]
        public string ChargeType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'OneTime', 'Monthly',
        /// 'Yearly'
        /// </summary>
        [JsonProperty(PropertyName = "billingCycleType")]
        public string BillingCycleType { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "periodFrom")]
        public System.DateTime? PeriodFrom { get; set; }

        /// <summary>
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "periodTo")]
        public System.DateTime? PeriodTo { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "quantity")]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or sets price paid per unit.
        /// </summary>
        [JsonProperty(PropertyName = "costPrice")]
        public double? CostPrice { get; set; }

        /// <summary>
        /// Gets or sets prorated price paid per unit.
        /// </summary>
        [JsonProperty(PropertyName = "costPriceProrated")]
        public double? CostPriceProrated { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or sets indicates whether or not the price of the charge is
        /// proratable.
        /// </summary>
        [JsonProperty(PropertyName = "isProratable")]
        public bool? IsProratable { get; set; }

    }
}
